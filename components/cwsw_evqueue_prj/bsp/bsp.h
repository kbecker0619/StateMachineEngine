/** @file
 *	@brief	One-sentence short description of file.
 *
 *	Description:
 *
 *
 *	@note	This file is an as-needed COPY of the file created by Microchip's Harmony Configurator,
 *	v2.04, and/or the tool-created support files (e.g., Peripheral Libs) supplied as part of the
 *	MHC eco system. We have NO intention of stealing code or technology, or of claiming undue
 *	credit. This file is here ONLY during the buildup of support for the PIC32 MZ2048 EFM 144
 *	Starter Kit, what we call the "MZ EZ" board. Eventually, I hope to link directly to Harmony's
 *	code, in a way that allows different target architectures
 *
 *	Anyway, because this is a copy of code generated by a tool owned by Microchip, there is
 *	attribution here but no copyright notice.
 *
 *
 *	Original:
 *	Created on: Dec 21, 2017
 *	Author: kbecker
 *
 *	Current:
 *	$Revision: $
 *	$Date: $
 */

#ifndef CWSW_BSP_CWSW_BSP_H_
#define CWSW_BSP_CWSW_BSP_H_

#ifdef	__cplusplus
extern "C" {
#endif

// ============================================================================
// ----	Include Files ---------------------------------------------------------
// ============================================================================

#include "projcfg.h"

// ----	System Headers --------------------------

// ----	Project Headers -------------------------
#include "cwsw_lib.h"
//#include "cwsw_board.h"		/* tDO_LogicalValues */

// ----	Module Headers --------------------------


// ============================================================================
// ----	Constants -------------------------------------------------------------
// ============================================================================
#define BSP_CWSW_BSP_H__REVSTRING "$Revision: 0123 $"

/** Identification for the LED indicators supported by this BSP.
 *	These values are intended to be used by this own module, and all those above it
 *	(e.g., the application itself).
 */
enum eBspIndictorLed {
	kBspHeartbeatInd, kBspActivity2, kBspActivity3,

	/* note: because there could be mapping differences between the purpose of an LED on this BSP,
	 * and the led provided by the board, we cannot simply assume that the LEDs will be assigned
	 * contiguously and starting from value 0, so we need to manually maintain the number of LEDs
	 * used in this BSP. The value defined here should be a base-1 count of the number of LEDs used.
	 */
	kBspNumLeds = 3
};


// ============================================================================
// ----	Type Definitions ------------------------------------------------------
// ============================================================================

typedef enum eBspIndictorLed tBspIndicatorLed;


// ============================================================================
// ----	Public Variables ------------------------------------------------------
// ============================================================================

// ============================================================================
// ----	Public API ------------------------------------------------------------
// ============================================================================

extern uint16_t BSP__Init(void);
extern bool Cwsw_Bsp__Get_Initialized(void);
extern void Evq_Ut__Task(void);


/** Target symbol for GET(BspSwitch1) */
#define GET_BspSwitch1()					Get(Cwsw_Board, kBrdSwitch1)
#define GET_activity1ind()					!(!(activity1ind))
extern bool activity1ind;
#define GET_activity2ind()					!(!(activity2ind))
extern bool activity2ind;
#define GET_activity3ind()					!(!(activity3ind))
extern bool activity3ind;

#define GET_SetEventSeen()					!(!(seteventseen))
#define SET_SetEventSeen(val)				do { seteventseen = (val); } while(0)
extern bool seteventseen;


/** Target symbol for Get(Cwsw_Board, Resource) interface */
#define Cwsw_Bsp__Get(resource)				Cwsw_Bsp__Get_ ## resource()


/** Target symbol for Set(Cwsw_Board, Resource, xxx) interface */
#define Cwsw_Bsp__Set(resource, value)		Cwsw_Bsp__Set_ ## resource(value)


/* Target for some of the expansions to the Set(Cwsw_Bsp, Resource, xxx) interface. */
//extern void Cwsw_Bsp__Set_BspHeartbeatInd(tDO_LogicalValues onoff);
//extern void Cwsw_Bsp__Set_BspActivity2(tDO_LogicalValues onoff);
//extern void Cwsw_Bsp__Set_BspActivity3(tDO_LogicalValues onoff);


/* Targets for expansion of SET(GlobalResource, Value) interface.
 * In this module, the LEDs are considered global resources, "owned" by the BSP,
 * which can be set (written to) by any application-layer module.
 */
#define SET_BspHeartbeatInd(value)	Set(Cwsw_Bsp, BspHeartbeatInd, value)
#define SET_BspActivity2(value)		Set(Cwsw_Bsp, BspActivity2, value)
#define SET_BspActivity3(value)		Set(Cwsw_Bsp, BspActivity3, value)


#ifdef	__cplusplus
}
#endif

#endif /* CWSW_BSP_CWSW_BSP_H_ */

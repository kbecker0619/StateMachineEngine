/** @file
 *	@brief	Clock System service definitions and declarations specific to MZ support.
 *
 *	Description:
 *	This file contains the Clock System Service fucntions and definitions that
 *	are specific to the MZ chip set family.
 *
 *
 *	@note	This file is an as-needed COPY of the file created by Microchip's Harmony Configurator,
 *	v2.04, and/or the tool-created support files (e.g., Peripheral Libs) supplied as part of the
 *	MHC eco system. We have NO intention of stealing code or technology, or of claiming undue
 *	credit. This file is here ONLY during the buildup of support for the PIC32 MZ2048 EFM 144
 *	Starter Kit, what we call the "MZ EZ" board. Eventually, I hope to link directly to Harmony's
 *	code, in a way that allows different target architectures
 *
 *	Anyway, because this is a copy of code generated by a tool owned by Microchip, there is
 *	attribution here but no copyright notice.
 *
 *
 *	Original:
 *	Created on: Dec 27, 2017
 *	Author: kbecker
 *
 *	Current:
 *	$Revision: $
 *	$Date: $
 */

#ifndef CWSW_ARCH_PIC32MZ_FRAMEWORK_SYSTEM_CLK_SRC_SYS_CLK_NONE_H_
#define CWSW_ARCH_PIC32MZ_FRAMEWORK_SYSTEM_CLK_SRC_SYS_CLK_NONE_H_

#ifdef	__cplusplus
extern "C" {
#endif

// ============================================================================
// ----	Include Files ---------------------------------------------------------
// ============================================================================

// ----	System Headers --------------------------
#include <stdint.h>
#include <stdbool.h>
//#include <stddef.h>

// ----	Project Headers -------------------------
#include "../sys_clk.h"		/* klb: CLK_SOURCES_REFERENCE */

// ----	Module Headers --------------------------


// ============================================================================
// ----	Constants -------------------------------------------------------------
// ============================================================================
#define ARCH_PIC32MZ2048EFM_FRAMEWORK_SYSTEM_CLK_SRC_SYS_CLK_PIC32MZ_H__REVSTRING "$Revision: 0123 $"

/* System PLL lock time maximum

  Summary:
    This macro defines the maximum delay for getting the PLL to lock after
    setting the clock source.

  Description:
    This macro defines the maximum delay for getting the PLL to lock after
    setting the clock source.

  Remarks:
    None.
*/
#define SYS_CLK_SYSPLL_LOCK_DELAY_80MHZ     400

/* CLK_REFERENCE_DIVISOR_MAX

  Summary:
    Maximum Reference Clock Divider bits

  Description:
    This macro defines the maximum divisor value for the reference oscillator control module.

*/
#define CLK_REFERENCE_DIVISOR_MAX   65535

/* CLK_REFERENCE_TRIM_MAX

  Summary:
    Maximum Reference Clock Trim bits

  Description:
    This macro defines the maximum trim value for the reference oscillator control module.

*/

#define CLK_REFERENCE_TRIM_MAX 511


// ============================================================================
// ----	Type Definitions ------------------------------------------------------
// ============================================================================

// ============================================================================
// ----	Public Variables ------------------------------------------------------
// ============================================================================

// ============================================================================
// ----	Public API ------------------------------------------------------------
// ============================================================================

/******************************************************************************
  Function:
    unsigned int SYS_CLK_SystemClockSet ( SYS_CLK_SOURCE clockSource,
                                            unsigned long clockFrequency )
  Summary:
    Sets the clock source and frequency for the system clock.

  Description:
    This function sets the clock frequency and source for the system clock.

  Remarks:
    None.
*/
extern unsigned int SYS_CLK_SystemClockSet(CLK_SOURCES_SYSTEM clockSource, unsigned long clockFrequency);

/******************************************************************************
  Function:
    unsigned long SYS_CLK_PeripheralClockSet ( SYS_CLK_SOURCE clockSource,
						unsigned long clockFrequency )
  Summary:
    Sets the clock source and frequency for the peripheral clock.

  Description:
    This function sets the clock frequency and source for the peripheral clock.

  Remarks:
    None.
*/
extern unsigned long SYS_CLK_PeripheralClockSet(CLK_SOURCES_SYSTEM clockSource, unsigned long clockFrequency);

/******************************************************************************
  Function:
    bool SYS_CLK_FrequencyErrorCheck( unsigned long inpFreq,
                                        unsigned long acheivedFreq )
  Summary:
    Checks whether the difference between the user requested clock rate and
    the maximum achievable clock is within limits.

  Description:
    This function checks whether the difference between the user requested clock
    rate and the maximum achievable clock is within limits.

  Returns:
    - true  - The difference between clocks is within limits
    - false - The difference between clocks is not within limits

  Remarks:
    None.
*/
extern bool SYS_CLK_FrequencyErrorCheck(unsigned long inpFreq, unsigned long acheivedFreq);

/******************************************************************************
  Function:
    unsigned long SYS_CLK_ClosestFactorsGet(    unsigned long sourceFrequency,
                                                unsigned long requestedFrequency,
                                                unsigned char *valueToReg1,
                                                unsigned char *valueToReg2 )

  Summary:
    Gets the value of the multiplier and divisor that is closest to the
    expected value for the system PLL.

  Description:
    This function gets the value of the multiplier and divisor that is closest
    to the expected value for the system PLL.

  Remarks:
    None.
*/
extern unsigned long SYS_CLK_ClosestFactorsGet(
		unsigned long sourceFrequency,
		unsigned long requestedFrequency,
		unsigned char *valueToPLLMULT,
		unsigned char *valueToPLLODIV);

/******************************************************************************
  Function:
    unsigned long SYS_CLK_ReferenceClockSet ( SYS_CLK_SOURCE clockSource,
                                                unsigned long clockFrequency )
  Summary:
    Sets the clock source and frequency of the reference clock.

  Description:
    This function sets the clock frequency and source for the reference clock.

  Remarks:
    None.
*/
extern unsigned long SYS_CLK_ReferenceClockSet(CLK_SOURCES_REFERENCE clockSource, unsigned long clockFrequency);

/******************************************************************************
  Function:
    char SYS_CLK_ReferenceClosestDivisorGet( unsigned char regValue,
						unsigned char *valueToReg )

  Summary:
    Gets the value of the reference clock divisor that is closest to the
    expected value.

  Description:
    This function gets the value of the reference clock divisor that is closest
    to the expected value.

  Remarks:
    None.
*/
extern char SYS_CLK_ReferenceClosestDivisorGet(unsigned char regValue, unsigned char *valuetoWrite);

/******************************************************************************
  Function:
    void SYS_CLK_ReferenceClockSwitch( SYS_CLK_SOURCE clockSource )

  Summary:
    Initiates the clock switch for the reference clock out.

  Description:
    This function initiates the reference clock switch.

  Remarks:
    None.
*/
extern void SYS_CLK_ReferenceClockSwitch(CLK_SOURCES_REFERENCE clockSource);

/******************************************************************************
  Function:
   char SYS_CLK_PeripheralClosestDivisorGet( unsigned char regValue,
                                                    unsigned char *valueToReg )

  Summary:
    Gets the value of the peripheral clock divisor that is closest to the
    expected value.

  Description:
    This function gets the value of the peripheral clock divisor that is
    closest to the expected value.

  Remarks:
    None.
*/
extern char SYS_CLK_PeripheralClosestDivisorGet(unsigned char regValue, unsigned char *valueToReg);


// *****************************************************************************
/* Macro:
    SYS_CLK_ReferenceSourceToRegValue( factor )

  Summary:
    Converts the value of the reference clock source in the SYS_CLK_SOURCE
    enumeration to the actual value to be written to the register.

  Description:
    This macro converts the value of the reference clock source in the
    SYS_CLK_SOURCE enumeration to the actual value to be written to the register.

  Remarks:
    None.

*/

extern unsigned long SYS_CLK_ClosestFactorsGet(
		unsigned long sourceFrequency,
		unsigned long requestedFrequency,
		unsigned char *valueToPLLMULT,
		unsigned char *valueToPLLODIV);

/******************************************************************************
  Function:
    int8_t SYS_CLK_SystemClockSourceSwitch ( CLK_SOURCES_SYSTEM clockSource,
                                            unsigned char valueToReg,
                                            unsigned char valueToReg2,
                                            bool waitUntilComplete )

  Summary:
    Initiates the clock switch for the system clock.

  Description:
    This function initiates the clock switch for the system clock.

  Remarks:
    None.
*/
extern int8_t SYS_CLK_SystemClockSourceSwitch(
		CLK_SOURCES_SYSTEM clockSource,
		unsigned char valueToReg,
		unsigned char valueToReg2,
		bool waitUntilComplete);

/******************************************************************************
  Function:
    uint32_t _SYS_CLK_PLLInputDividerRead ( void )

  Summary:
    Reads the value of the PLL Input Divider.

  Description:
    This function will read from the configuration the current value for the
    PLL Input Divider.  The value is translated from the configuration bit into
 *  the intended divider value.

  Remarks:
    None.
*/
extern uint32_t _SYS_CLK_PLLInputDividerRead(void);

/******************************************************************************
  Function:
    uint32_t _SYS_CLK_PLLMultiplierRead ( void )

  Summary:
    Reads the value of the PLL Multiplier.

  Description:
    This function will read from the configuration the current value for the
    PLL Multiplier.  The value is translated from the configuration bit into
 *  the intended multiplier value.

  Remarks:
    None.
*/
extern uint32_t _SYS_CLK_PLLMultiplierRead(void);

/******************************************************************************
  Function:
    uint32_t _SYS_CLK_PLLOutputDividerRead ( void )

  Summary:
    Reads the value of the PLL Output Divider.

  Description:
    This function will read from the configuration the current value for the
    PLL Output Divider.  The value is translated from the configuration bit into
 *  the intended divider value.

  Remarks:
    None.
*/
extern uint32_t _SYS_CLK_PLLOutputDividerRead(void);

/******************************************************************************
  Function:
   uint32_t SYS_CLK_FRCClosestDivisorGet ( unsigned char regValue,
                            unsigned char *valueToReg, uint32_t requestedFrequency )

  Summary:
    Gets the value of the FRC clock divisor that is closest to the
    expected value.

  Description:
    This function gets the value of the FRC clock divisor that is
    closest to the expected value.

  Remarks:
    None.
*/
extern uint32_t SYS_CLK_FRCClosestDivisorGet(unsigned char regValue, unsigned char *valueToReg, uint32_t requestedFrequency);

extern bool SYS_CLK_FrequencyErrorCheck(unsigned long inpFreq, unsigned long acheivedFreq);

extern uint32_t _SYS_CLK_PeripheralClockRead(CLK_BUSES_PERIPHERAL peripheralBus, uint32_t systemClockHz);


#ifdef	__cplusplus
}
#endif

#endif /* CWSW_ARCH_PIC32MZ_FRAMEWORK_SYSTEM_CLK_SRC_SYS_CLK_NONE_H_ */

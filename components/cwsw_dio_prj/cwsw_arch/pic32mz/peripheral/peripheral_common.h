/** @file
 *	@brief	This file defines the common macros and definitions used by the peripheral
 *	library implementation headers.
 *
 *	Description:
 *	This file defines the common macros and definitions used by the peripheral
 *	library implementation headers.  All the definitions in this file are
 *	private to the peripheral library implementation.
 *
 *
 *	@note	This file is an as-needed COPY of the file created by Microchip's Harmony Configurator,
 *	v2.04, and/or the tool-created support files (e.g., Peripheral Libs) supplied as part of the
 *	MHC eco system. We have NO intention of stealing code or technology, or of claiming undue
 *	credit. This file is here ONLY during the buildup of support for the PIC32 MZ2048 EFM 144
 *	Starter Kit, what we call the "MZ EZ" board. Eventually, I hope to link directly to Harmony's
 *	code, in a way that allows different target architectures
 *
 *	Anyway, because this is a copy of code generated by a tool owned by Microchip, there is
 *	attribution here but no copyright notice.
 *
 *
 *	Original:
 *	Created on: Dec 27, 2017
 *	Author: kbecker
 *
 *	Current:
 *	$Revision: $
 *	$Date: $
 */

#ifndef PERIPHERAL_COMMON_H_
#define PERIPHERAL_COMMON_H_

#ifdef	__cplusplus
extern "C" {
#endif

// ============================================================================
// ----	Include Files ---------------------------------------------------------
// ============================================================================

#include "projcfg.h"

// ----	System Headers --------------------------

// ----	Project Headers -------------------------
#include "cwsw_lib.h"

// ----	Module Headers --------------------------


// ============================================================================
// ----	Constants -------------------------------------------------------------
// ============================================================================
#define PERIPHERAL_COMMON_H__REVSTRING "$Revision: 0123 $"


// ============================================================================
// ----	Type Definitions ------------------------------------------------------
// ============================================================================

/* SFR_TYPE datatype

  Summary:
    Defines the type for SFR on the 32 bit parts

  Description:
    This type is specific to the SFR type in the 32 bit parts.

*/
typedef volatile uint32_t SFR_TYPE;


// ============================================================================
// ----	Public Variables ------------------------------------------------------
// ============================================================================

// ============================================================================
// ----	Public API ------------------------------------------------------------
// ============================================================================

/* Helper Macro:  Unsupported Attribute Abstraction

  Summary:
    Abstracts the use of the unsupported attribute defined by the compiler

  Description:
    This macro abstracts the definition of the unsupported attribute as defined
    by the compiler. This macro is to be used as an attribute for the interface
    definitions which are not supported by the part selected by the user.

  Example:
    void _PLIB_UNSUPPORTED PLIB_USART_Enable(USART_MODULE_ID index);

    Generates a compiler error, if the interface is not defined for the
    part selected.

 Remarks:
    This macro is defined for each compiler individually currently, so as to
    account for the compiler differences in implementing the attribute.

    This macro provides a PLIB-related message when unsupported PLIB routines
    and data types are instantiated.  Thus, it is part of the peripheral
    library implementation and prefixed with a single underscore.
*/

#ifndef _PLIB_UNSUPPORTED
	#if defined(__PIC32)
		#define _PLIB_UNSUPPORTED   __attribute__((unsupported("The microcontroller selected does not implement this feature.")))
	#else
		#define _PLIB_UNSUPPORTED   /* nothing */
	#endif
#endif


/*******************************************************************************
  Function:
    void PLIB_ASSERT ( bool test, char *message )

  Summary:
    Implements default PLIB assert routine, asserts that "test" is true

  Description:
    This macro implements the default PLIB assert routine that asserts that a
    test is true.

  Precondition:
    None.

  Parameters:
    test     - This is an expression that resolves to a boolean value
               (zero=false, non-zero=true)

    message  - This is a NULL-terminated character string that can be displayed
               on a debug output terminal if "test" is false (if supported)

  Returns:
    None     - Normally hangs in a loop

  Example:
    <code>
    void MyFunc ( int *pointer )
    {
        PLIB_ASSERT(NULL != pointer, "NULL Pointer passed to MyFunc");

        //...
    }
    </code>

  Remarks:
    Can be overridden as desired by defining your own PLIB_ASSERT macro before
    including plib.h.

    By default, this is equated to SYS_ASSERT" if it is defined.  If "SYS_ASSERT"
    is not defined, it defaults to the compiler's "assert" function.
*/

#ifndef PLIB_ASSERT

    #if defined(SYS_ASSERT)

        #define PLIB_ASSERT(test,message)   SYS_ASSERT(test,message)

    #else

        #define PLIB_ASSERT(test,message)

    #endif

#endif


#ifdef	__cplusplus
}
#endif

#endif /* PERIPHERAL_COMMON_H_ */

/** @file
 *	@brief	Clock system service interface header.
 *
 *	Description:
 *	This file contains the interface definition for the Clock System
 *	Service.  It provides a way to interact with the Clock subsystem to
 *	manage the timing requests supported by the system.
 *
 *
 *	@note	This file is an as-needed COPY of the file created by Microchip's Harmony Configurator,
 *	v2.04, and/or the tool-created support files (e.g., Peripheral Libs) supplied as part of the
 *	MHC eco system. We have NO intention of stealing code or technology, or of claiming undue
 *	credit. This file is here ONLY during the buildup of support for the PIC32 MZ2048 EFM 144
 *	Starter Kit, what we call the "MZ EZ" board. Eventually, I hope to link directly to Harmony's
 *	code, in a way that allows different target architectures
 *
 *	Anyway, because this is a copy of code generated by a tool owned by Microchip, there is
 *	attribution here but no copyright notice.
 *
 *
 *	Original:
 *	Created on: Dec 26, 2017
 *	Author: kbecker
 *
 *	Current:
 *	$Revision: $
 *	$Date: $
 */

#ifndef SYS_CLK_H_
#define SYS_CLK_H_

#ifdef	__cplusplus
extern "C" {
#endif

// ============================================================================
// ----	Include Files ---------------------------------------------------------
// ============================================================================

#include "projcfg.h"

// ----	System Headers --------------------------
#include <stdint.h>
#include <stdbool.h>

// ----	Project Headers -------------------------
#include "system_config.h"
#include "system/common/sys_module.h"

#if  (XPRJ_Debug_Win_MinGW)
#include "peripheral/osc/processor/osc_none.h"

#elif defined(__PIC32MX__) || defined(__PIC32MZ__) || \
    defined(__PIC32MK__) || defined(__PIC32WK__)
    #include "peripheral/osc/osc_p32xxxx.h"
#endif

// ----	Module Headers --------------------------


// ============================================================================
// ----	Constants -------------------------------------------------------------
// ============================================================================
#define SYS_CLK_H__REVSTRING "$Revision: 0123 $"

/*  Peripherals Clock Buses enumeration

  Summary:
    Lists the available peripheral clock buses.

  Description:
    This enumeration lists all of the available peripheral clock buses. This is
    used by the SYS_CLK_PeripheralFrequencyGet and
    SYS_CLK_PeripheralFrequencySet functions.

  Remarks:
    This enumeration is supported on the following Microchip device families:
        - PIC32M

    The system service covers a wide range of devices. Not all the elements
    listed in here will be relevant for your device.
*/
typedef enum
{
    /* Select peripheral bus 1. This should be the selection for the
    devices which don't have multiple peripheral buses */
    CLK_BUS_PERIPHERAL_1 = 0x00,

    /* Select peripheral bus 2 */
    CLK_BUS_PERIPHERAL_2 = 0x01,

    /* Select peripheral bus 3 */
    CLK_BUS_PERIPHERAL_3 = 0x02,

    /* Select peripheral bus 4 */
    CLK_BUS_PERIPHERAL_4 = 0x03,

    /* Select peripheral bus 5 */
    CLK_BUS_PERIPHERAL_5 = 0x04,

    /* Select peripheral bus 6 */
    CLK_BUS_PERIPHERAL_6 = 0x05,

    /* Select peripheral bus 7 */
    CLK_BUS_PERIPHERAL_7 = 0x06,

    /* Select peripheral bus 8 */
    CLK_BUS_PERIPHERAL_8 = 0x07,

} CLK_BUSES_PERIPHERAL;

/*  Reference clock sources enumeration

  Summary:
    Lists the available clock sources for the Reference clock.

  Description:
    This enumeration lists all the available peripheral clock sources. This is
    used by the SYS_CLK_ReferenceFrequencySet function.

  Remarks:
    This enumeration is supported on the following Microchip device families:
        - PIC32M
*/
typedef enum
{
    /* Source of Reference clock is System clock */
    CLK_SOURCE_REF_SYSTEMCLK,

    /* Source of Reference clock is Peripheral clock */
    CLK_SOURCE_REF_PBCLK_BUS1,

    /* Source of Reference clock is Primary oscillator */
    CLK_SOURCE_REF_PRIMARY,

    /* Source of Reference clock is Fast RC oscillator */
    CLK_SOURCE_REF_FRC,

    /* Source of Reference clock is Low power RC oscillator */
    CLK_SOURCE_REF_LPRC,

    /* Source of Reference clock is Secondary oscillator */
    CLK_SOURCE_REF_SECONDARY,

    /* Source of clock is output of USB PLL
    This is used only for the Reference clock. */
    CLK_SOURCE_REF_USBPLL_OUT ,

    /* Source of clock is the output of System PLL. Input to the
    system PLL may be Primary or FRC */
    CLK_SOURCE_REF_SYSPLL_OUT ,

    /* Source of clock is external(from the pin) */
    CLK_SOURCE_REF_EXTERNAL,

    /* Source of Reference clock is backup Fast RC oscillator */
    CLK_SOURCE_REF_BFRC,

} CLK_SOURCES_REFERENCE;


/*  System Clock sources enumeration

  Summary:
    Lists the available clock sources for the system clock.

  Description:
    This enumeration lists all the available clock sources for the system clock.
    This is used by the SYS_CLK_INIT structure.

  Remarks:
    This enumeration is supported on the following Microchip device families:
        - PIC32M
*/
typedef enum
{
    /* Source of clock is internal fast RC */
    SYS_CLK_SOURCE_FRC,

    /* Source of clock is internal fast RC multiplied by system PLL */
    SYS_CLK_SOURCE_FRC_SYSPLL,

    /* Source of clock is primary oscillator */
    SYS_CLK_SOURCE_PRIMARY,

    /* Source of clock is primary oscillator multiplied by
    the System PLL value and divided by the divisor configured by software */
    SYS_CLK_SOURCE_PRIMARY_SYSPLL,

    /* Source of clock is secondary oscillator */
    SYS_CLK_SOURCE_SECONDARY,

    /* Source of clock is internal low power RC */
    SYS_CLK_SOURCE_LPRC,

    /* Source of clock is internal fast RC divided by the divisor
    configured in software */
    SYS_CLK_SOURCE_FRC_BY_16,

    /* Source of clock is internal fast RC divided by the divisor
    configured in software */
    SYS_CLK_SOURCE_FRC_BY_DIV,

    /* Source of clock is backup fast RC */
    SYS_CLK_SOURCE_BKP_FRC,

    /* Source of clock is USB PLL output configured in software */
    SYS_CLK_SOURCE_UPLL,

    /* Source of clock is none*/
    SYS_CLK_SOURCE_NONE,

} CLK_SOURCES_SYSTEM;


// ============================================================================
// ----	Type Definitions ------------------------------------------------------
// ============================================================================

/*  System clock operation status

  Summary:
    Lists all the possible status of a system clock operation.

  Description:
    This enumeration lists all the possible status of a system clock operation.

  Remarks:
    This enumeration is supported on the following Microchip device families:
        - PIC32M
*/

typedef enum
{
    /* The last operation was successful */
    SYS_CLK_OPERATION_COMPLETE /*DOM-IGNORE-BEGIN*/ = 0 /*DOM-IGNORE-END*/,

    /* Operation started, may be PLL is not yet locked */
    SYS_CLK_OPERATION_IN_PROGRESS /*DOM-IGNORE-BEGIN*/ = 1 /*DOM-IGNORE-END*/,

    /* The last operation was not successful, Clock switching is not enabled
    through configuration bits */
    SYS_CLK_OPERATION_FAIL_SWITCHING_DISABLED /*DOM-IGNORE-BEGIN*/ = -1 /*DOM-IGNORE-END*/,

    /* The last operation was not successful, requested frequency
    is not achievable */
    SYS_CLK_OPERATION_FAIL_NOT_ACHIEVABLE /*DOM-IGNORE-BEGIN*/ = -2 /*DOM-IGNORE-END*/,

    /* The last operation was not successful, register is not ready to
    take the new value  */
    SYS_CLK_OPERATION_FAIL_REGISTER_NOT_READY /*DOM-IGNORE-BEGIN*/ = -3 /*DOM-IGNORE-END*/,

    /* The last operation was not successful, USB PLL is not enabled in
    through the 'configuration bits'. The same must be update in system_config.h  */
    SYS_CLK_OPERATION_FAIL_USBPLL_NOT_ENABLED /*DOM-IGNORE-BEGIN*/ = -4 /*DOM-IGNORE-END*/,

    /* PLL Lock time out. A restart is the only option  */
    SYS_CLK_OPERATION_FAIL_PLL_LOCK_TIMEOUT /*DOM-IGNORE-BEGIN*/ = -5 /*DOM-IGNORE-END*/,

    /* PLL cannot work with the current input clock frequency, adjust the
    clock input or the input divisor. Check the device data sheet to know the PLL input
    requirement */
    SYS_CLK_PLL_INVALID_INP_FREQUENCY /*DOM-IGNORE-BEGIN*/ = -6 /*DOM-IGNORE-END*/,

} SYS_CLK_STATUS;


/* CLK System Service Error Handler Function Pointer

   Summary:
    Pointer to a CLK System service SYS_CLK_ClockFailureCallbackRegister
    function.

   Description:
    This data type defines the type of the CLK System Service Error Handler
    callback function. The parameters are described here and a partial example
    implementation is provided. On a clock failure, the device will switch its
    clock source to the FRC clock. By registering the callback function user
    will get the current System clock source and the clock frequency. User can
    use this information to try switching back.

  Parameters:
    systemSource      - System clock source.
    systemFrequencyHz - System clock frequency in hertz.

  Returns:
    None.

  Example:
    <code>
    void SYS_CLK_ClockFailureCallbackRegister(  errorHandler );

    errorHandler ( CLK_SOURCES_SYSTEM systemSource, uint32_t systemFrequencyHz )
    {
        //Log a warning
        //Try switching back to the old source
    }
    </code>

  Remarks:
    This function is supported on the following Microchip device families:
        - PIC32M
*/
typedef void ( *SYS_CLK_ERROR_HANDLER )  ( CLK_SOURCES_SYSTEM systemSource, uint32_t systemFrequencyHz );


/* Clock System Service Reference Oscillator initialization data

  Summary:
    Defines the data required to initialize the Oscillator for the Clock System
    Service.

  Description:
    This structure defines the data required to initialize the Oscillator
    for the Clock System Service.

  Remarks:
    This structure is supported on the following Microchip device families:
        - PIC32M
        - PIC32C

    This structure only includes the necessary settings for the clock module.
    Other features like USB clock and reference clock are considered to be
    optional and not every system will use it. There are dedicated APIs for
    configuring those.
*/
typedef    struct
{
#if defined(__PIC32MX__) || defined(__PIC32MZ__) || \
    defined(__PIC32MK__) || defined(__PIC32WK__)

    /* System module initialization */
    SYS_MODULE_INIT          moduleInit;

    /* Initializations for System clock  */
    CLK_SOURCES_SYSTEM       systemClockSource;

    /* Set the System clock frequency */
    uint32_t                 systemClockFrequencyHz;

    /* Wait until the clock switch operation is completed */
    bool                     waitTillComplete;

    /* Even though the secondary oscillator is not used, keeping the
    oscillator running, allows a fast switch to the lower system
    clock for low-power operation */
    bool                    secondaryOscKeepEnabled;

    /* System action on a 'Wait' instruction */
    OSC_OPERATION_ON_WAIT   onWaitInstruction;

#else

    /* System module initialization */
    SYS_MODULE_INIT         moduleInit;

#endif

} SYS_CLK_INIT;


// ============================================================================
// ----	Public Variables ------------------------------------------------------
// ============================================================================

// ============================================================================
// ----	Public API ------------------------------------------------------------
// ============================================================================

/* Function:
    void SYS_CLK_Initialize ( const SYS_CLK_INIT * clkInit )

  Summary:
    Initializes hardware and internal data structure of the System Clock.
    <p><b>Implementation:</b> Static/Dynamic</p>

  Description:
    This function initializes the hardware and internal data structure of System
    Clock Service.

  Precondition:
    None.

  Parameters:
    clkInit      - Pointer to a data structure containing any data necessary
                   to initialize the System Clock. This pointer can be
                   NULL if no data is required as static overrides have
                   been provided.

  Returns:
    None.

  Example:
    <code>
    //Example 1: Do not alter the configuration bit settings
    SYS_CLK_Initialize ( NULL );

    //Example 2: Want to change the configuration bit settings
    SYS_CLK_INIT generalInit;

    // Populate the oscillator initialization structure
    generalInit.systemClockSource = SYS_CLK_SOURCE_FRC_SYSPLL;
    generalInit.systemClockFrequencyHz = 30000000;
    generalInit.onWaitInstruction = OSC_ON_WAIT_SLEEP;
    generalInit.secondaryOscKeepEnabled = true;
    SYS_CLK_Initialize (&generalInit);

    //Wait until complete
    while ( SYS_CLK_SystemOperationStatus ( ) !=  SYS_CLK_OPERATION_COMPLETE );

    //Configuration success
    </code>

  Remarks:
    This function is supported on the following Microchip device families:
        - PIC32M
        - PIC32C

    This is API must be be called at the time of system initialization to
    initialize the oscillator. Call this again to change any of the
    initialization settings.

    If the frequency settings are already done through the 'configuration bits',
    call this API by passing 'NULL' to it. In any case calling this API is
    necessary get the internal data structures updated.

    To change the clock source clock switching must be enabled through
    'configuration bits'.
*/
extern void SYS_CLK_Initialize(const SYS_CLK_INIT * clkInit);

/* Function:
    uint32_t SYS_CLK_SystemFrequencyGet ( void )

  Summary:
    Gets the system clock frequency in Hertz.
    <p><b>Implementation:</b> Static/Dynamic</p>

  Description:
    This function gets the System clock frequency in Hertz.

  Precondition:
    The SYS_CLK_Initialize function should be called before calling this API.

  Parameters:
    None.

  Returns:
    System clock frequency in Hertz.

  Example:
    <code>
    uint32_t sysClockHz;

    sysClockHz = SYS_CLK_SystemFrequencyGet ( );
    </code>

  Remarks:
    This function is supported on the following Microchip device families:
        - PIC32M
        - PIC32C
 */
extern uint32_t SYS_CLK_SystemFrequencyGet(void);



#ifdef	__cplusplus
}
#endif

#endif /* SYS_CLK_H_ */
